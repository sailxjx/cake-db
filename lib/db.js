// Generated by CoffeeScript 1.6.2
(function() {
  var config, conn, crypto, mysql;

  mysql = require('mysql');

  crypto = require('crypto');

  config = require('./config');

  conn = null;

  exports.loadDb = function(callback) {
    var connName, dbConfig;

    if (conn != null) {
      return callback(null, conn);
    } else {
      dbConfig = config(config('db_env', 'db'), 'db');
      if (dbConfig.database != null) {
        connName = dbConfig.database;
        delete dbConfig.database;
        conn = mysql.createConnection(dbConfig);
        conn.query("CREATE DATABASE IF NOT EXISTS " + connName, function(err, result) {
          if (err != null) {
            throw err;
          }
          return conn.query("USE " + connName, function(err, result) {
            if (err != null) {
              throw err;
            }
            return callback(null, conn);
          });
        });
      } else {
        conn = mysql.createConnection(dbConfig);
        callback(null, conn);
      }
      return true;
    }
  };

  exports.loadSchema = function(callback) {
    var loadSchema;

    loadSchema = function() {
      return conn.query("SELECT version FROM schema_migrations", function(err, result) {
        var row, schema;

        if ((err != null) && err.code === 'ER_NO_SUCH_TABLE') {
          return conn.query("CREATE TABLE `schema_migrations` (                      `version` varchar(255) NOT NULL DEFAULT '' COMMENT 'version',                      PRIMARY KEY (`version`)                    ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='schema_migrations'", function(err, result) {
            return callback(err, []);
          });
        } else {
          schema = [];
          for (row in result) {
            if (result[row]['version'] != null) {
              schema.push(result[row]['version']);
            }
          }
          return callback(err, schema.sort());
        }
      });
    };
    if (conn != null) {
      return loadSchema();
    } else {
      return this.loadDb(function() {
        return loadSchema();
      });
    }
  };

}).call(this);
