// Generated by CoffeeScript 1.6.2
(function() {
  var Migrate, async, colors, config, db, fs,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  fs = require('fs');

  async = require('async');

  colors = require('colors');

  db = require('../../db');

  config = require('../../config');

  Migrate = require('../../modules/migrate');

  exports.main = function(options) {
    var tPath;

    console.log('migrate start');
    tPath = "" + global.__basepath + "/db/migrate";
    return fs.readdir(tPath, function(err, fileList) {
      if (err != null) {
        throw err.red;
      }
      fileList.sort();
      return db.loadSchema(function(err, schema) {
        return async.eachSeries(fileList, (function(file, next) {
          var task, version;

          version = file.split('_')[0];
          if (__indexOf.call(schema, version) >= 0) {
            return next();
          } else {
            console.log(new Array(60).join('-'));
            console.log("migrate file " + file);
            task = require("" + tPath + "/" + file);
            if (typeof task.change === 'function') {
              return task.change(function() {
                var mig;

                mig = new Migrate();
                return async.eachSeries(arguments, (function(action, _next) {
                  if (typeof mig[action[0]] === 'function') {
                    return mig[action[0]](action[1], function(err, result) {
                      if (err != null) {
                        return _next(err);
                      }
                      mig.register(version, action);
                      return _next();
                    });
                  } else {
                    return _next("no function called " + action[0]);
                  }
                }), function(err) {
                  if (err != null) {
                    return mig.rollback(function(_err) {
                      return next(err);
                    });
                  } else {
                    return mig.addSchema(version, next);
                  }
                });
              });
            } else {
              return next("" + file + " has no function change!");
            }
          }
        }), function(err) {
          if (err != null) {
            console.log(err.toString().red);
          } else {
            console.log('migrate finish'.green);
          }
          return process.exit();
        });
      });
    });
  };

}).call(this);
