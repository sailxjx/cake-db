// Generated by CoffeeScript 1.6.2
(function() {
  var async, buildQuery, calledSteps, colors, config, db, fs, mixFoos, mixin,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  fs = require('fs');

  async = require('async');

  colors = require('colors');

  db = require('../../db');

  config = require('../../config');

  calledSteps = [];

  buildQuery = {
    create: function(data) {
      var query;

      query = ("CREATE TABLE `" + data.table + "` (") + this.getFields(data) + ", PRIMARY KEY (`id`))    ENGINE=InnoDB DEFAULT CHARSET=utf8" + this.getComment(data) + ";";
      return query;
    },
    getFields: function(data) {
      var comment, fieldArr, fields, name, type;

      fields = data.fields;
      fieldArr = ["`id` int(10) unsigned NOT NULL AUTO_INCREMENT COMMENT 'identify'"];
      for (name in fields) {
        type = "";
        comment = "";
        switch (fields[name][0]) {
          case 'string':
            type = "varchar(50) NOT NULL DEFAULT ''";
            break;
          case 'int':
            type = "int(10) unsigned NOT NULL DEFAULT '0'";
            break;
          case 'text':
            type = "text";
            break;
          default:
            type = fields[name][0];
        }
        comment = fields[name][1] ? fields[name][1] : name;
        fieldArr.push("`" + name + "` " + type + " COMMENT '" + comment + "'");
      }
      if (data.timestamps) {
        fieldArr.push("`create_time` datetime NOT NULL");
        fieldArr.push("`update_time` datetime NOT NULL");
      }
      return fieldArr.join(',');
    },
    getComment: function(data) {
      if (data.comment != null) {
        return " COMMENT '" + data.comment + "' ";
      } else {
        return "";
      }
    }
  };

  mixFoos = {
    createTable: function(table, data, callback) {
      calledSteps.push({
        createTable: arguments
      });
      return async.waterfall([
        (function(next) {
          return db.loadDb(next);
        }), (function(conn, next) {
          var query;

          query = buildQuery.create(data);
          console.log("create table " + table);
          console.log("query -> " + query);
          return conn.query(query, next);
        })
      ], function(err, result) {
        return callback(err, result);
      });
    },
    rollback: function(callback) {
      console.log("rollback".red);
      return callback(null);
    },
    logSchema: function(version, callback) {
      calledSteps.push({
        logSchema: arguments
      });
      return async.waterfall([
        (function(next) {
          return db.loadDb(next);
        }), (function(conn, next) {
          var query;

          console.log("log schema");
          query = "INSERT INTO `schema_migrations` (version) VALUES (" + version + ")";
          console.log("query -> " + query);
          return conn.query(query, next);
        })
      ], function(err, result) {
        return callback(err, result);
      });
    }
  };

  mixin = function(migrate) {
    var foo;

    for (foo in mixFoos) {
      while (migrate[foo] == null) {
        migrate[foo] = mixFoos[foo];
      }
    }
    return migrate;
  };

  exports.main = function(options) {
    var tPath;

    console.log('begin migrate');
    tPath = "" + global.__basepath + "/db/migrate";
    return fs.readdir(tPath, function(err, fileList) {
      if (err != null) {
        throw err.red;
      }
      fileList.sort();
      return db.loadSchema(function(err, schema) {
        return async.eachSeries(fileList, (function(file, next) {
          var migrate, version;

          version = file.split('_')[0];
          if (__indexOf.call(schema, version) >= 0) {
            return next();
          } else {
            console.log(new Array(60).join('-'));
            migrate = require("" + tPath + "/" + file);
            mixin(migrate);
            if (typeof migrate.change === 'function') {
              return migrate.change(function(err, result) {
                if (err != null) {
                  console.log(err.toString().red);
                  return migrate.rollback(next);
                } else {
                  return migrate.logSchema(version, function(err) {
                    console.log(("finish migrate " + file).green);
                    return next(err);
                  });
                }
              });
            } else {
              return next("" + file + " has no function change!");
            }
          }
        }), function(err) {
          if (err != null) {
            console.log(err.toString().red);
          } else {
            console.log('finish migrate'.green);
          }
          return process.exit();
        });
      });
    });
  };

}).call(this);
