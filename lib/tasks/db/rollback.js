// Generated by CoffeeScript 1.6.2
(function() {
  var Migrate, async, colors, db, fs;

  colors = require('colors');

  fs = require('fs');

  async = require('async');

  db = require('../../db');

  Migrate = require('../../modules/migrate');

  exports.help = function() {
    console.log("example:");
    console.log("  cake -v 1 db:rollback");
    return console.log("  cake -v 20130530093101810 db:rollback");
  };

  exports.main = function(options) {
    var rollType, tPath, version;

    version = options.version != null ? options.version : 1;
    rollType = 0;
    tPath = "" + global.__basepath + "/db/migrate";
    if (!/\d+/.test(version)) {
      console.log('invalid version'.red);
      return this.help();
    } else if (/\d{14}/.test(version)) {
      rollType = 1;
      console.log("rollback to version " + version);
    } else {
      rollType = 0;
      console.log("rollback last " + version + " versions");
    }
    return fs.readdir(tPath, function(err, fileList) {
      var file, fileHash, v, _i, _len;

      if (err != null) {
        throw err;
      }
      fileHash = {};
      for (_i = 0, _len = fileList.length; _i < _len; _i++) {
        file = fileList[_i];
        v = file.split('_')[0];
        fileHash[v] = file;
      }
      return db.loadSchema(function(err, schema) {
        var rollVersions, _j, _len1, _ref;

        if (err != null) {
          throw err;
        }
        rollVersions = [];
        if (rollType === 1) {
          _ref = schema.reverse();
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            v = _ref[_j];
            rollVersions.push(v);
            if (v === version) {
              break;
            }
          }
        } else {
          rollVersions = schema.reverse().splice(0, version);
        }
        return async.eachSeries(rollVersions, (function(version, next) {
          var mig, task;

          console.log(new Array(60).join('-'));
          console.log("rollback version " + version);
          if (fileHash[version] != null) {
            task = require("" + tPath + "/" + fileHash[version]);
            if (typeof task.change === 'function') {
              mig = new Migrate();
              return task.change(function() {
                return async.eachSeries(arguments, (function(action, _next) {
                  mig.register(version, action);
                  return _next();
                }), function(err) {
                  if (err != null) {
                    return next(err);
                  }
                  return mig.rollback(function(_err) {
                    if (_err != null) {
                      return next(_err);
                    }
                    return mig.delSchema(version, next);
                  });
                });
              });
            } else {
              return next('migration file has no change function');
            }
          } else {
            return next('could not find migration file');
          }
        }), function(err) {
          if (err != null) {
            console.log(err.toString().red);
          } else {
            console.log('rollback finish'.green);
          }
          return process.exit();
        });
      });
    });
  };

}).call(this);
