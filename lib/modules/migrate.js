// Generated by CoffeeScript 1.6.2
(function() {
  var Migrate, async, db, queryBuilder;

  async = require('async');

  db = require('../db');

  queryBuilder = require('../query-builder');

  async = require('async');

  module.exports = Migrate = (function() {
    function Migrate(version, task) {
      this.calledSteps = [];
      this.version = version;
      this.task = task;
    }

    Migrate.prototype.start = function(callback) {
      var _this = this;

      if (typeof this.task.change === 'function') {
        return this.task.change(function() {
          return async.eachSeries(arguments, (function(action, next) {
            var func;

            func = _this[action[0]];
            if (typeof func === 'function') {
              return func(action[1], function(err, result) {
                if (err != null) {
                  return next(err);
                }
                _this.register(action);
                return next();
              });
            } else {
              return next("no function called " + func);
            }
          }), function(err) {
            if (err != null) {
              return _this.rollback(function(_err) {
                return callback(err);
              });
            } else {
              return _this.addSchema(callback);
            }
          });
        });
      } else {
        return callback("no change function!");
      }
    };

    Migrate.prototype.register = function(action) {
      this.calledSteps.unshift(action);
      return this;
    };

    Migrate.prototype.createTable = function(data, callback) {
      var table;

      while (data.table == null) {
        return callback('missing table name');
      }
      table = data.table;
      return db.loadDb(function(err, conn) {
        var query;

        query = queryBuilder.createTable(data);
        console.log("query -> " + query);
        return conn.query(query, callback);
      });
    };

    Migrate.prototype.rollCreateTable = function(data, callback) {
      return this.dropTable(data, callback);
    };

    Migrate.prototype.dropTable = function(data, callback) {
      var table;

      while (data.table == null) {
        return callback('missing table name');
      }
      table = data.table;
      return db.loadDb(function(err, conn) {
        var query;

        query = queryBuilder.dropTable(data);
        console.log("query -> " + query);
        return conn.query(query, callback);
      });
    };

    Migrate.prototype.addColumn = function(data, callback) {
      var table;

      while (data.table == null) {
        return callback('missing table name');
      }
      table = data.table;
      return db.loadDb(function(err, conn) {
        var query;

        query = queryBuilder.addColumn(data);
        console.log("query -> " + query);
        return conn.query(query, callback);
      });
    };

    Migrate.prototype.rollAddColumn = function(data, callback) {
      return this.dropColumn(data, callback);
    };

    Migrate.prototype.dropColumn = function(data, callback) {
      var table;

      while (data.table == null) {
        return callback('missing table name');
      }
      table = data.table;
      return db.loadDb(function(err, conn) {
        var query;

        query = queryBuilder.dropColumn(data);
        console.log("query -> " + query);
        return conn.query(query, callback);
      });
    };

    Migrate.prototype.addSchema = function(callback) {
      var _this = this;

      return db.loadDb(function(err, conn) {
        var query;

        query = "INSERT INTO `schema_migrations` (version) VALUES (" + _this.version + ")";
        console.log("query -> " + query);
        return conn.query(query, callback);
      });
    };

    Migrate.prototype.delSchema = function(callback) {
      var _this = this;

      return db.loadDb(function(err, conn) {
        var query;

        query = "DELETE FROM `schema_migrations` WHERE `version` = '" + _this.version + "'";
        console.log("query -> " + query);
        return conn.query(query, callback);
      });
    };

    Migrate.prototype.rollback = function(callback) {
      var _this = this;

      if (this.task.rollback === 'function') {
        return this.task.rollback(function() {
          return async.eachSeries(arguments, (function(action, next) {
            var func;

            func = _this[action[0]];
            if (typeof func === 'function') {
              return func(action[1], function(err, result) {
                if (err != null) {
                  return next(err);
                }
                return next();
              });
            } else {
              return next("no function called " + func);
            }
          }), function(err) {
            if (err != null) {
              return callback(err);
            }
            return _this.delSchema(callback);
          });
        });
      } else {
        console.log('rollback -> ' + JSON.stringify(this.calledSteps));
        return async.eachSeries(this.calledSteps, (function(action, next) {
          var roll;

          roll = 'roll' + action[0][0].toUpperCase() + action[0].slice(1);
          if (typeof _this[roll] === 'function') {
            return _this[roll](action[1], next);
          } else {
            return next("could not find rollback function " + roll);
          }
        }), function(err) {
          if (err != null) {
            return callback(err);
          }
          return _this.delSchema(callback);
        });
      }
    };

    return Migrate;

  })();

}).call(this);
