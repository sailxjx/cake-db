// Generated by CoffeeScript 1.6.2
(function() {
  var Migrate, async, db, queryBuilder;

  async = require('async');

  db = require('../db');

  queryBuilder = require('../query-builder');

  module.exports = Migrate = (function() {
    function Migrate() {
      this.calledSteps = {};
    }

    Migrate.prototype.register = function(version, action) {
      while (this.calledSteps[version] == null) {
        this.calledSteps[version] = [];
      }
      this.calledSteps[version].unshift(action);
      return this;
    };

    Migrate.prototype.createTable = function(data, callback) {
      var table;

      while (data.table == null) {
        return callback('missing table name');
      }
      table = data.table;
      return async.waterfall([
        (function(next) {
          return db.loadDb(next);
        }), (function(conn, next) {
          var query;

          query = queryBuilder.createTable(data);
          console.log("query -> " + query);
          return conn.query(query, next);
        })
      ], function(err, result) {
        return callback(err, result);
      });
    };

    Migrate.prototype.rollCreateTable = function(data, callback) {
      return this.dropTable(data, callback);
    };

    Migrate.prototype.dropTable = function(data, callback) {
      var table;

      while (data.table == null) {
        return callback('missing table name');
      }
      table = data.table;
      return async.waterfall([
        (function(next) {
          return db.loadDb(next);
        }), (function(conn, next) {
          var query;

          query = queryBuilder.dropTable(data);
          console.log("query -> " + query);
          return conn.query(query, next);
        })
      ], function(err, result) {
        return callback(err, result);
      });
    };

    Migrate.prototype.addColumn = function(data, callback) {
      var table;

      while (data.table == null) {
        return callback('missing table name');
      }
      table = data.table;
      return async.waterfall([
        (function(next) {
          return db.loadDb(next);
        }), (function(conn, next) {
          var query;

          query = queryBuilder.addColumn(data);
          console.log("query -> " + query);
          return conn.query(query, next);
        })
      ], function(err, result) {
        return callback(err, result);
      });
    };

    Migrate.prototype.rollAddColumn = function(data, callback) {
      return this.delColumn(data, callback);
    };

    Migrate.prototype.delColumn = function(data, callback) {
      var table;

      while (data.table == null) {
        return callback('missing table name');
      }
      table = data.table;
      return async.waterfall([
        (function(next) {
          return db.loadDb(next);
        }), (function(conn, next) {
          var query;

          query = queryBuilder.delColumn(data);
          console.log("query -> " + query);
          return conn.query(query, next);
        })
      ], function(err, result) {
        return callback(err, result);
      });
    };

    Migrate.prototype.addSchema = function(version, callback) {
      return async.waterfall([
        (function(next) {
          return db.loadDb(next);
        }), (function(conn, next) {
          var query;

          console.log("add schema");
          query = "INSERT INTO `schema_migrations` (version) VALUES (" + version + ")";
          console.log("query -> " + query);
          return conn.query(query, next);
        })
      ], function(err, result) {
        return callback(err, result);
      });
    };

    Migrate.prototype.delSchema = function(version, callback) {
      return async.waterfall([
        (function(next) {
          return db.loadDb(next);
        }), (function(conn, next) {
          var query;

          console.log('del schema');
          query = "DELETE FROM `schema_migrations` WHERE `version` = '" + version + "'";
          console.log("query -> " + query);
          return conn.query(query, next);
        })
      ], function(err, result) {
        return callback(err, result);
      });
    };

    Migrate.prototype.rollback = function(callback) {
      var iterator, version,
        _this = this;

      console.log('rollback -> ' + JSON.stringify(this.calledSteps));
      iterator = [];
      for (version in this.calledSteps) {
        iterator.push(version);
      }
      return async.eachSeries(iterator, (function(version, next) {
        return async.eachSeries(_this.calledSteps[version], (function(action, _next) {
          var roll;

          roll = 'roll' + action[0][0].toUpperCase() + action[0].slice(1);
          if (typeof _this[roll] === 'function') {
            return _this[roll](action[1], _next);
          } else {
            return _next("could not find rollback function " + roll);
          }
        }), function(_err) {
          return next(_err);
        });
      }), function(err) {
        return callback(err);
      });
    };

    return Migrate;

  })();

}).call(this);
